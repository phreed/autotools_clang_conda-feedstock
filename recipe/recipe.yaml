package:
  name: autotools_clang_conda
  version: 0.0.13

build:
  number: 0
  skip:
    - not win
  script:
    - if: win
      then: build.nu

requirements:
  build:
    - if: win
      then: nushell
  run:
    - if: win
      then:
        - clang
        - clangxx
        - llvm-tools
        - lld
        - posix
        - m2-automake-wrapper
        - m2-libtool
        - m2-autoconf
        - m2-make
        - m2-findutils
        - m2-m4
        - m2-bash
        - m2-sed
        - m2-base
        - m2-diffutils
        - cmake
        - nushell

tests:
  - if: win
    then:
      script:
        - if not (($env.LIBRARY_BIN + "\autotools.nu") | path exists) { exit 1 }

about:
  homepage: https://github.com/conda-forge/autotools_clang_conda-feedstock
  repository: https://github.com/conda-forge/autotools_clang_conda-feedstock
  documentation: https://github.com/conda-forge/autotools_clang_conda-feedstock/blob/main/README.md
  license: BSD-3-Clause
  license_file: LICENSE
  summary: Nushell autotools module for compiling projects on Windows using Clang and LLVM tools
  description: |
    This package provides a comprehensive Nushell module for compiling autotools-based projects
    on Windows using Clang compiler, LLD linker, and LLVM tools. The resulting packages are
    MSVC compatible.

    Features:
    - Single autotools.nu module with comprehensive build functions
    - Clang/LLVM toolchain with MSVC compatibility
    - Automated libtool patching for Windows DLL creation
    - Library prefix handling and DLL renaming
    - Comprehensive error handling and logging
    - Both direct Nushell and bash compatibility modes

    ## Usage

    Add to your recipe.yaml:

    ```yaml
    build:
      skip:
        - win and vc<14

    requirements:
      build:
        - {{ compiler('c') }}        # Windows CL compiler for env setup
        - if: win
          then:
            - autotools_clang_conda
            - llvm-openmp            # (only if OpenMP is used)
    ```

    ## Windows Build Scripts

    Individual functions:
    ```nushell
    use %BUILD_PREFIX%\Library\bin\autotools.nu
    autotools setup-environment
    autotools patch-libtool
    autotools create-def-file mylib.def obj1.o obj2.o lib1.lib
    ```

    The autotools module provides all necessary functions for Windows builds including
    environment setup, libtool patching, and library handling.

extra:
  recipe-maintainers:
    - isuruf
    - phreed
